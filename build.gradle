/*
 * Copyright (C) 2015 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'io.fabric.gradle.unity:unity:0.0.1'
        classpath 'io.fabric.gradle.weaving:projectOrBinary:0.0.1'
        classpath 'io.fabric.gradle.release:kit-release:0.0.4'
    }
}

ext {
    commonPlugins = new File(projectDir, 'common-plugins.gradle')
    internalScript = new File(projectDir, 'internal.gradle')

    fabricDir = projectDir.parentFile.parentFile
    qualityScript = new File(fabricDir, 'quality.gradle')
    deployScript = new File(fabricDir, 'deploy.gradle')
    kitsForRelease = [
            ":tweet-composer": false,
            ":tweet-ui": false,
            ":tweet-mopub": false,
            ":twitter": false,
            ":twitter-core": false,
            ":twitter-unity": false
    ]
}

subprojects { Project subproject ->
    apply from: rootProject.internalScript
    apply plugin: 'io.fabric.gradle.weaving.projectOrBinary'

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    // We need to do this so that by the time any project registers a dependency, that project
    // already have this property.
    projectOrBinary {
        useProject = kitsForRelease.findAll({it.getValue()}).isEmpty() ||
                kitsForRelease.get(subproject.path)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

ext {
    enableTestCodeCoverage = true
    compileSdkVersion = 23
    targetSdkVersion = 22
    buildToolsVersion = '23.0.3'
    buildNumber = 'dev'

    // Fabric
    fabric = 'io.fabric.sdk.android:fabric:1.3.+@aar'
    fabricTest = 'io.fabric.sdk.android:fabric-test:0.0.+@aar'
    mopub = 'com.mopub:mopub-sdk:4.6.0@aar'

    // Sample App
    leakCanary = 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    leakCanaryNoOp = 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    appCompat = 'com.android.support:appcompat-v7:22.2.0'

    // Tests
    spoon = 'com.squareup.spoon:spoon-client:1.3.2'
    espresso = 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestingSupport = 'com.android.support.test:runner:0.3'
    junit = 'junit:junit:4.12'
    junitAddons = 'junit-addons:junit-addons:1.4'
    robolectric = 'org.robolectric:robolectric:3.0'
    mockito = 'org.mockito:mockito-core:1.9.5'
    dexmakerMockito = 'com.google.dexmaker:dexmaker-mockito:1.2'
    mavenAntTasks = 'org.apache.maven:maven-ant-tasks:2.1.3'

    // Other
    picasso = 'com.squareup.picasso:picasso:2.5.2'
    supportV4 = 'com.android.support:support-v4:22.2.0'
    retrofit = 'com.squareup.retrofit2:retrofit:2.0.2'
    retrofitMock = 'com.squareup.retrofit2:retrofit-mock:2.0.2'
    retrofitGsonConverter = 'com.squareup.retrofit2:converter-gson:2.0.2'
    gson = 'com.google.code.gson:gson:2.6.1'
    okHttp = 'com.squareup.okhttp3:okhttp:3.2.0'
    design = 'com.android.support:design:22.2.0'
    tweetText = 'com.twitter:twitter-text:1.13.0'
}
